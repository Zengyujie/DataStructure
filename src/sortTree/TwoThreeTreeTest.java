package sortTree;

public class TwoThreeTreeTest {

/*
 * 
多路查找树

节点的度：子节点个数
数的度：最大子节点的度

2-3树:(一种B树)
	1，所有叶子节点都在同一层(B树都满足)
	2，有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点
	3，n节点同理，要么没有要么有n个子节点
	4，2-3树是由二节点和三节点构成的树
	5，当插入一个节点时，如果不满足以上条件，就需要拆分，方式是向上拆分
	6，节点满足排序树规则

B树：(blance tree)
	1，b树的阶 = b树的度
	2，b树是排序树
	3，b树的关键字分布在整个树中，即叶子和树干都有数据

B+树：
	1，所有数据都在叶子节点
	2，叶子节点用链表穿起来，链表是有序的
	3，树干中的数据代表索引
	4，树干中的值代表子节点第一位的值
	5，节点的最低使用率为1/2；

B*树：
	1，在B+树的基础上，增加了指向兄弟树干的指针
	2，节点的最低使用率为2/3
	3，

*/
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
